#!/usr/bin/env python
# coding: utf-8
from __future__ import unicode_literals
from __future__ import print_function
import re
import sys
import argparse
import base64
import os
import string
import random
import requests
import datetime
from collections import Counter
from colorclass import Color
try:
    requests.packages.urllib3.disable_warnings()
except:
    pass
URLS = [
    '/Abs/',
    '/aspnet_client/',
    '/Autodiscover/',
    '/AutoUpdate/',
    '/CertEnroll/',
    '/CertSrv/',
    '/Conf/',
    '/DeviceUpdateFiles_Ext/',
    '/DeviceUpdateFiles_Int/',
    '/ecp/',
    '/Etc/',
    '/EWS/',
    '/Exchange/',
    '/Exchweb/',
    '/GroupExpansion/',
    '/Microsoft-Server-ActiveSync/',
    '/OAB/',
    '/ocsp/',
    '/owa/',
    '/PhoneConferencing/',
    '/PowerShell/',
    '/Public/',
    '/RequestHandler/',
    '/RequestHandlerExt/',
    '/Rgs/',
    '/Rpc/',
    '/RpcWithCert/',
    '/Exchweb/',
    '/RpcWithCert/',
    '/UnifiedMessaging/'
]
validsubdomains = []
NTLMPROTECTEDURLS=[]

def discover(host):
    indicator_count = 0

    subdomains = [
        ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(20)),
        'dialin',
        'meet',
        'lyncdiscover',
        'scheduler',
        'access',
        'lync',
        'lyncws.',
        'lyncext',
        'lyncaccess01',
        'lyncaccess',
        'lync10',
        'lyncweb',
        'sip',
        'lyncdiscoverinternal',
        'mail',
        'webmail',
        'outlook',
        'exchange'
    ]
    for position in range(0, len(subdomains)):
        lync_url = "https://{0}.{1}".format(subdomains[position], host)
        print_status("Trying {0}.{1}".format(subdomains[position], host))
        try:
            response = requests.get(lync_url, timeout=3, verify=False)
            if response.status_code == 200 or response.status_code == 403 or response.status_code == 401:

                if position == 0:
                    print_warn('Wildcard domain found')
                    break
                else:
                    print_good("Domain found {0}.{1}".format(subdomains[position], host))
                    validsubdomains.append("{0}.{1}".format(subdomains[position], host))
                    indicator_count += 1
        except Exception as error:
            continue

    # Print Lync results
    switch = {
        0: 'No',
        1: 'Maybe',
        2: 'Probably',
        3: 'Almost definitely'
    }
    return indicator_count, switch.get(indicator_count, 'Definitely')

    def print_error(msg):
        print("\033[1m\033[31m[-]\033[0m {0}".format(msg))


def print_status(msg):
    print("\033[1m\033[34m[*]\033[0m {0}".format(msg))


def print_good(msg):
    print("\033[1m\033[32m[+]\033[0m {0}".format(msg))


def print_warn(msg):
    print("\033[1m\033[33m[!]\033[0m {0}".format(msg))


if __name__ == '__main__':
    print(Color(u'''{autoyellow}
 _                __  __ ___ ___        _                       ___  _
| |  _  _ _ _  __|  \/  / __| __|_ ____| |_  __ _ _ _  __ _ ___|   \(_)___ __ _____ _____ _ _
| |_| || | ' \/ _| |\/| \__ \ _|\ \ / _| ' \/ _` | ' \/ _` / -_) |) | (_-</ _/ _ \ V / -_) '_|
|____\_, |_||_\__|_|  |_|___/___/_\_\__|_||_\__,_|_||_\__, \___|___/|_/__/\__\___/\_/\___|_|
     |__/                                             |___/

                                {/autoyellow}{autowhite}Developed and designed by Lazaar Sami{/autowhite}
                                {autogreen}lazaars@gmail.com{/autogreen}
    '''))
    DOMAIN = input("Type the main domain: ")
    subdomain_count, findings = discover(DOMAIN)
    print_good("{0} subdomain(s) found(s) - {1} ".format(subdomain_count, findings))
    if subdomain_count>0:

        for validsubdomain in validsubdomains:
            print_status("Searching for urls that are accessible via NTLM under \033[1m\033[32m{0}\033[0m".format(validsubdomain))
            try:
                for url in URLS:
                    response = requests.get("https://{0}{1}".format(validsubdomain, url), timeout=3, verify=False)
                    if response.status_code == 401:
                        NTLMPROTECTEDURLS.append("https://{0}{1}".format(validsubdomain, url))
                        
            except Exception as error:
                continue
        print ("\033[1m\033[33mThese urls are protected by NTLM and probably vulnerable to NTLM brute force attack :)")
        for NTLMPROTECTEDURL in NTLMPROTECTEDURLS:
            print_status("\033[1m\033[32m{0}\033[0m".format(NTLMPROTECTEDURL))
