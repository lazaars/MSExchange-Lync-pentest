from ntlm_auth import ntlm
import struct, base64, string
from urllib2 import HTTPError, URLError
from httplib import HTTPException, HTTPSConnection
import ssl


class DOMAIN_utils(object):
    def __init__(self):
        self.EWSurl = "/EWS/Exchange.asmx"
        self.TargetName = None

    @staticmethod
    def parse_NTLM_CHALLENGE_MESSAGE(msg2):
        msg2 = base64.decodestring(msg2)
        Signature = msg2[0:8]
        msg_type = struct.unpack("<I", msg2[8:12])[0]
        assert (msg_type == 2)
        TargetNameLen = struct.unpack("<H", msg2[12:14])[0]
        TargetNameMaxLen = struct.unpack("<H", msg2[14:16])[0]
        TargetNameOffset = struct.unpack("<I", msg2[16:20])[0]
        TargetName = msg2[TargetNameOffset:TargetNameOffset + TargetNameMaxLen]
        NegotiateFlags = struct.unpack("<I", msg2[20:24])[0]
        ServerChallenge = msg2[24:32]
        Reserved = msg2[32:40]
        TargetInfoLen = struct.unpack("<H", msg2[40:42])[0]
        TargetInfoMaxLen = struct.unpack("<H", msg2[42:44])[0]
        TargetInfoOffset = struct.unpack("<I", msg2[44:48])[0]
        TargetInfo = msg2[TargetInfoOffset:TargetInfoOffset + TargetInfoLen]
        return TargetName

    @staticmethod
    def Get_Domain(exchangeserver):
        target_name = None
        try:

            HTTPREQ = HTTPSConnection(exchangeserver, context=ssl._create_unverified_context())
            HTTPREQ.putrequest("GET", "/autodiscover/autodiscover.xml")
            HTTPREQ.putheader("Content-length", "%d" % 0)
            HTTPREQ.putheader("Connection", "Keep-Alive")
            # #HTTPREQ.putheader("User-Agent", 'Python-urllib/2.6')
            # #if user == "":
            # #    user = raw_input("[+][devalias.net][NTLM Authentication] Enter username (DOMAIN\username): ")
            # #if password == "":
            # #    password = raw_input("[+][devalias.net][NTLM Authentication] Enter password: ")
            context = ntlm.Ntlm()
            negotiate_message = context.create_negotiate_message("xxx").decode('ascii')
            auth = u'%s %s' % ('NTLM', negotiate_message)
            HTTPREQ.putheader("Authorization", auth)
            HTTPREQ.endheaders()
            try:
                resp = HTTPREQ.getresponse()
                challenge = resp.msg.get('WWW-Authenticate').split(' ')[1]
                target_name = DOMAIN_utils.parse_NTLM_CHALLENGE_MESSAGE(challenge)
            except HTTPError as e:
                return targetname
            except URLError as e:
                return target_name
            except HTTPException as e:
                return target_name
            except Exception as e:
                #print('Reason4: ', e)
                return target_name
        except Exception as e:
            return target_name
        else:
            return target_name
